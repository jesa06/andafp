<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://jesa06.github.io/andafp/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jesa06.github.io/andafp/" rel="alternate" type="text/html" /><updated>2022-11-29T15:54:41-06:00</updated><id>https://jesa06.github.io/andafp/feed.xml</id><title type="html">JESA’s Fastpages</title><subtitle>My first blog with Fastpages! I literally don't understand what I'm doing but socials down below lol</subtitle><entry><title type="html">Lesson3.3and3.4</title><link href="https://jesa06.github.io/andafp/2022/11/29/Lesson3.3and3.4.ipynb" rel="alternate" type="text/html" title="Lesson3.3and3.4" /><published>2022-11-29T00:00:00-06:00</published><updated>2022-11-29T00:00:00-06:00</updated><id>https://jesa06.github.io/andafp/2022/11/29/Lesson3.3and3.4</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "metadata": {}, "source": [ "# Lesson 2 3.3-3.4 Notes and Hacks \n", "> Joselyn Anda\n", "\n", "- toc: true \n", "- badges: true\n", "- comments: true\n", "- categories: [jupyter]" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Learning Objective:\n", "1. Express an algorithm that uses sequencing without using a programming language\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Essential Knowledge and Vocab\n", "- Algorithms can be expressed in many ways and can be executed by programs that are implemented using programming languages. \n", "- Every algorithm can be constructed using combinations of sequencing, selection, and iteration\n", "\n", "*Variable*- storing an actual value, the value of a variable within another variable, the result of an operation, or result of a procedural call\n", "\n", "*Algorithm*- finite set of instructions that accomplish a specific task\n", "Steps:\n", "\n", "1. *Sequencing*- doing steps in order, doing the first step then the second then the third, etc. \n", "2. *Selection*- when the programmer decides between two different outcomes \n", "3. *Iteration*- when you repeat a step until a certain condition is fulfilled" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Example\n", "\n", "Most algorithms use a flow chart to demonstrate how the algorithm proceeds. \n", "\n", "1. Set largestNumber to 0\n", "2. Get next number in list\n", "3. If number is larger than largestNumber then set largestNumber to number\n", "4. If there are more numbers in list, go back to Step 2\n", "5. Display largestNumber\n", "\n", "Sequencing: Steps 1-5 in order\n", "\n", "Selection: Step 3\n", "\n", "Iteration: Step 4 " ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "Practice: calculate and display average of 25, 43, and 18\n", "\n", "num 1 ⟵ 25\n", "\n", "num 2 ⟵ 43\n", "\n", "num 3 ⟵ 18\n", "\n", "average ⟵ (num 1 + num 2 + num 3)/3 \n", "\n", "Answer: 28.667" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "Practice: consider the following code segment, which uses the variables a, b, c:\n", "\n", "a ⟵ 1\n", "\n", "b ⟵ 2\n", "\n", "c ⟵ 3\n", "\n", "a ⟵ b\n", "\n", "b ⟵ c\n", "\n", "display(a)\n", "\n", "display(c)\n", "- which is displayed as a result of running the code segment\n", "1. 1 1\n", "2. 1 2\n", "3. 2 3\n", "\n", "Answer: 3" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "Practice: consider the following code segment\n", "\n", "s ⟵ 10\n", "\n", "l ⟵ 20\n", "\n", "a ⟵ 30 \n", "\n", "y ⟵ 40\n", "\n", "s ⟵ l\n", "\n", "l ⟵ a\n", "\n", "y ⟵ l\n", "\n", "a ⟵ s\n", "\n", "what is the value of a as a result of executing the code segment?\n", "1. 10 \n", "2. 20 \n", "3. 30 \n", "4. 40 \n", "\n", "Answer: 2. 20 is the value" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Arithmetic Operators \n", "\n", "addition: a + b\n", "\n", "subtraction: a - b\n", "\n", "multiplication: a * b\n", "\n", "division: a / b\n", "\n", "MOD represent the Modulus operator. Returns the value after division: a MOD b. Like a remainder\n", " \n", " ex: \n", " \n", " 9 MOD 2 = 1" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Goal: To evaluate expressions that manipulate strings\n", "Vocab and Examples:\n", "\n", "*String*: a sequence of characters\n", "\n", "1. *Len*: finds the number of characters in a string\n", "\n", " len(\"school\")\n", "\n", " Result:\n", " \"5\"\n", "------------------------------------------------------------\n", "2. *String concatenation*: combines two or more strings into one\n", "\n", " concat(\"computers\", \"arecool\" )\n", "\n", " Result:\n", " \"computersarecool\"\n", "------------------------------------------------------------\n", "3. *Substring*: a part of a existing string\n", "\n", " substring(\"APCSPrinciples\", 3, 6)\n", "\n", " Result:\n", " \"CSPrin\"\n", "\n", " Starts at the 3rd character (\"C\") and takes 6 characters after that (\"SPrin), then in all (\"CSPrin\")" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "# Homework Hacks" ] }, { "cell_type": "code", "execution_count": 1, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "[0, 2, 4, 6, 8, 10]\n" ] } ], "source": [ "numbers = [0,1,2,3,4,5,6,7,8,9,10]\n", "evens = []\n", "\n", "for i in numbers:\n", " if (numbers[i] % 2 == 0):\n", " evens.append(numbers[i])\n", "\n", "print(evens)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "1. Sequence: The whole code running through all of the steps, starting with defining the lists, going through them to take the even numbers, then printing them\n", "Selection: selection is when the code selects the even numbers out of the list \"if (numbers[i] % 2 == 0):\"\n", "Iteration: the for loop is iteration because it repeatedly goes through the list and appends the even numbers from the list \"for i in numbers:\"\n" ] }, { "cell_type": "code", "execution_count": 2, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "*\n", "**\n", "***\n", "****\n", "*****\n" ] } ], "source": [ "i = 1\n", "starString = \"*\"\n", "while i <= 5:\n", " j = 1\n", " while j <= i:\n", " print (\"*\", end= \"\")\n", " j += 1\n", " print ()\n", " i += 1" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "2. Sequence: all of the steps\n", "Selection: \"while j <= i:\" because they choose what j is\n", "Iteration: \"while i<+ 5:\" because the function repeats until they choose 5" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## 3.3 Video 2 Hacks\n", "### Practice Problems \n", "1. given the following code segment below:\n", "\n", "a ⟵ 7\n", "\n", "b ⟵ 1\n", "\n", "c ⟵ 3\n", "\n", "d ⟵ 4\n", "\n", "a ⟵ b\n", "\n", "b ⟵ c + d\n", "\n", "d ⟵ b \n", "\n", "find the value for a, b, c, d \n", "a = 1\n", "b = 7\n", "c = 3\n", "d = 7\n", "\n", "2. consider the following code segment:\n", "\n", "hot ⟵ true\n", "\n", "cold ⟵ false\n", "\n", "cold ⟵ hot \n", "\n", "hot ⟵ cold\n", "\n", "what are the values of hot and cold after executing the code segment? \n", "1. the value of hot is true, the value of cold is true \n", "2. the value of hot is false, the value of cold is true\n", "3. the value of hot is true, the value of cold is false\n", "4. the value of hot is false, the value of cold is false \n", "\n", "Answer: 1. Both are true\n", "\n", "3. Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. \n", "\n", "dog ⟵ yes\n", "\n", "cat ⟵ no \n", "\n", "cat ⟵ dog\n", "\n", "owl ⟵ cow\n", "\n", "Display dog\n", "Answer: yes\n", "the answer is correct because yes is assigned to dog in the beginning and it is never changed afterward\n", "\n", "---\n", "\n", "joselyn ⟵ 3\n", "lina ⟵ 11\n", "naja ⟵ 7\n", "amitha ⟵ 1\n", "\n", "joselyn ⟵ amitha\n", "naja ⟵ lina\n", "lina ⟵ amitha\n", "\n", "Display each person's value\n", "Answer:\n", "Joselyn = 1\n", "Lina = 1\n", "Naja = 11\n", "Amitha = 1\n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "4. Sequencing" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "num1 = 3\n", "num2 = 1\n", "num3 = 5\n", "num1 = num2 + num3 \n", "num2 = num1 + num3 # num2 is now the new num1 + num3" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "Answer: \n", "num1 = 1 + 5 = 6\n", "num2 = 6 + 5 = 11" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## 3.4 Video 1 Hacks\n", "\n", "### String Homework\n", "---------------------------------------------------------------\n", "\n", "\n", "- Test 1\n", "\n", " firstName <- \"Bob\"\n", " lastName <- \"Smith\"\n", " var <- substring(firstName, 1, 1)\n", " name <- concat(lastName, var)\n", " email <- concat(name, \"@gmail.com\")\n", " DISPLAY(email)\n", "\n", "- What would the result be?\n", "\n", " Hint:\n", " var = \"B\"\n", " name = \"SmithB\"\n", "\n", "Answer: SmithB@gmail.com\n", "\n", "---------------------------------------------------------------\n", "- Test 2\n", "\n", " word1 <- \"computer\"\n", " word2 <- \"textbooks\"\n", " length1 <- len(word1)/2 = 4\n", " length2 <- len(word2)/3 = 3\n", " first <- substring(word1, 2, len1) = ompu\n", " second <- substring(word2, len2+3, len2) = ook\n", " newWord <- concat(first, second) \n", " DISPLAY(newWord)\n", "\n", "Answer: ompuook\n", "---------------------------------------------------------------" ] } ], "metadata": { "kernelspec": { "display_name": "Python 3.9.12 ('base')", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.9.12" }, "orig_nbformat": 4, "vscode": { "interpreter": { "hash": "40d3a090f54c6569ab1632332b64b2c03c39dcf918b08424e98f38b5ae0af88f" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">My First Jupyter Notebook with Python Examples</title><link href="https://jesa06.github.io/andafp/2022/11/28/jesavscode.html" rel="alternate" type="text/html" title="My First Jupyter Notebook with Python Examples" /><published>2022-11-28T00:00:00-06:00</published><updated>2022-11-28T00:00:00-06:00</updated><id>https://jesa06.github.io/andafp/2022/11/28/jesavscode</id><author><name></name></author><summary type="html"><![CDATA[This is my first experience in coding and it is pretty tough. But I hope to learn a lot in this class and learn how to be more creative in coding.]]></summary></entry><entry><title type="html">Bash Tutorial + Results</title><link href="https://jesa06.github.io/andafp/2022/11/28/BashTutorial.html" rel="alternate" type="text/html" title="Bash Tutorial + Results" /><published>2022-11-28T00:00:00-06:00</published><updated>2022-11-28T00:00:00-06:00</updated><id>https://jesa06.github.io/andafp/2022/11/28/BashTutorial</id><author><name></name></author><summary type="html"><![CDATA[Using Bash in my Jupyter Notebook]]></summary></entry><entry><title type="html">Binary Logic and Abstraction</title><link href="https://jesa06.github.io/andafp/markdown/2022/11/15/BinaryandAbstraction.html" rel="alternate" type="text/html" title="Binary Logic and Abstraction" /><published>2022-11-15T00:00:00-06:00</published><updated>2022-11-15T00:00:00-06:00</updated><id>https://jesa06.github.io/andafp/markdown/2022/11/15/BinaryandAbstraction</id><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[Notes on binary and data abstraction]]></summary></entry><entry><title type="html">AP Classroom Final Exam</title><link href="https://jesa06.github.io/andafp/markdown/2022/11/09/APTestResults.html" rel="alternate" type="text/html" title="AP Classroom Final Exam" /><published>2022-11-09T00:00:00-06:00</published><updated>2022-11-09T00:00:00-06:00</updated><id>https://jesa06.github.io/andafp/markdown/2022/11/09/APTestResults</id><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[Review of AP Test Questions]]></summary></entry></feed>